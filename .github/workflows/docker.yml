name: "Push docker image to GCR"

on:
  push:
    branches: [taiko]
    tags:
      - "v*"

jobs:
  push-docker-image:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Login to GCR
        uses: docker/login-action@v2
        with:
          registry: gcr.io
          username: _json_key
          password: ${{ secrets.GCR_JSON_KEY }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            gcr.io/evmchain/taiko-geth
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=ref,event=tag
            type=sha
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

# fh geth version yml
# name: Build docker image

# on:
#   push:
#     tags:
#       - "[a-z0-9]+-v*"

# env:
#   REGISTRY: ghcr.io
#   IMAGE_NAME: ${{ github.repository }}

# jobs:
#   build-and-push-image:
#     runs-on: ubuntu-20.04
#     permissions:
#       contents: read
#       packages: write

#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v3

#       - name: Install Go
#         uses: actions/setup-go@v3
#         with:
#           go-version: 1.20.x

#       - uses: actions/cache@v3
#         with:
#           path: |
#             ~/go/pkg/mod
#             ~/.cache/go-build
#           key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
#           restore-keys: |
#             ${{ runner.os }}-go-

#       - name: Build Binary
#         run: make geth

#       - name: Log in to the Container registry
#         uses: docker/login-action@v2
#         with:
#           registry: ${{ env.REGISTRY }}
#           username: ${{ github.actor }}
#           password: ${{ secrets.GITHUB_TOKEN }}

#       - name: Generate docker tags/labels from github build context
#         id: meta
#         uses: docker/metadata-action@v4
#         with:
#           images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
#           # We tag latest only release of the form <variant>-v<major>.<minor>.<patch>-fh2.1 so "rc/beta" version are not flagged as latest
#           # - 2 docker tags: `{geth|bsc|...}-latest` and `{git-tag}`
#           tags: |
#             type=ref,event=tag,priority=1000
#             type=match,pattern=^(.*)-v\d+.\d+.\d+-fh,group=1,suffix=-latest-fh2
#           flavor: |
#             latest=false

#       - name: Build and push Docker image
#         uses: docker/build-push-action@v4
#         with:
#           context: ./build/bin
#           file: ./Dockerfile.fh
#           push: true
#           tags: ${{ steps.meta.outputs.tags }}
#           # org.opencontainers.image.version will match the tag name
#           labels: ${{ steps.meta.outputs.labels }}